apply plugin: 'com.android.application'

dependencies {
    //android.jar
    //compile files("${android.sdk}/platforms/${android.target}/android.jar")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':lib:DownloadProvider-lib')
}

android {
    packagingOptions {
//        pickFirst 'META-INF/foo.txt'

        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    lintOptions {
        abortOnError false
        quiet false
        showAll true
    }

    dexOptions { preDexLibraries = false }
}

android {
    compileSdkVersion Integer.parseInt(project.compileSdkVersion)
    buildToolsVersion project.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion Integer.parseInt(project.minSdkVersion)
        targetSdkVersion Integer.parseInt(project.targetSdkVersion)
        versionCode Integer.parseInt(project.versionCode)
        versionName project.versionName
    }

    signingConfigs {
        debug { storeFile file("keystore/debug.keystore") }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true

            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    new File(project(':lib:MyUtil').getProjectDir(), 'util-proguard-rules.pro'),
//                    new File(project(':lib:MyCommon').getProjectDir(), 'common-proguard-rules.pro'),
                    'proguard-project.txt'
        }

        debug {
            zipAlignEnabled true

            signingConfig signingConfigs.debug
            versionNameSuffix ".debug." + buildTime()
        }

        beta {
//            shrinkResources true
//            minifyEnabled true
            zipAlignEnabled true

            signingConfig signingConfigs.debug
            debuggable true
            versionNameSuffix ".beta." + buildTime()
        }
    }
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHH')
    return formattedDate
}
